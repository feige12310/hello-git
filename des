IP_table = [58, 50, 42, 34, 26, 18, 10, 2,
            60, 52, 44, 36, 28, 20, 12, 4,
            62, 54, 46, 38, 30, 22, 14, 6,
            64, 56, 48, 40, 32, 24, 16, 8,
            57, 49, 41, 33, 25, 17, 9, 1,
            59, 51, 43, 35, 27, 19, 11, 3,
            61, 53, 45, 37, 29, 21, 13, 5,
            63, 55, 47, 39, 31, 23, 15, 7]


IP_re_table = [40,8, 48, 16, 56, 24, 64, 32, 39,
             7, 47, 15, 55, 23, 63, 31, 38, 6,
             46, 14, 54, 22, 62, 30, 37,5, 45,
             13, 53, 21, 61, 29, 36, 4, 44, 12,
             52, 20, 60, 28, 35, 3, 43, 11, 51,
             19, 59, 27, 34, 2, 42, 10, 50, 18,
             58, 26, 33, 1, 41,9, 49, 17, 57, 25]



E  = [32, 1,  2,  3,  4,  5,  4,  5,
       6, 7,  8,  9,  8,  9, 10, 11,
      12,13, 12, 13, 14, 15, 16, 17,
      16,17, 18, 19, 20, 21, 20, 21,
      22, 23, 24, 25,24, 25, 26, 27,
      28, 29,28, 29, 30, 31, 32,  1]



P = [16,  7, 20, 21, 29, 12, 28, 17,
     1, 15, 23, 26,  5, 18, 31, 10,
     2,  8, 24, 14, 32, 27,  3,  9,
     19, 13, 30, 6, 22, 11,  4,  25]


S =  [
 [14, 4, 13,  1,  2, 15, 11,  8,  3, 10,  6, 12,  5,  9,  0,  7,
     0, 15,  7,  4, 14,  2, 13,  1, 10,  6, 12, 11,  9,  5,  3,  8,
     4,  1, 14,  8, 13,  6,  2, 11, 15, 12,  9,  7,  3, 10,  5,  0,
     15, 12,  8,  2,  4,  9,  1,  7,  5, 11,  3, 14, 10,  0,  6, 13 ],



[15,  1,  8, 14,  6, 11,  3,  4,  9,  7,  2, 13, 12,  0,  5, 10,
     3, 13,  4,  7, 15,  2,  8, 14, 12,  0,  1, 10,  6,  9, 11,  5,
     0, 14,  7, 11, 10,  4, 13,  1,  5,  8, 12,  6,  9,  3,  2, 15,
     13,  8, 10,  1,  3, 15,  4,  2, 11,  6,  7, 12,  0,  5, 14,  9],


[10,  0,  9, 14,  6,  3, 15,  5,  1, 13, 12,  7, 11,  4,  2,  8,
     13,  7,  0,  9,  3,  4,  6, 10,  2,  8,  5, 14, 12, 11, 15,  1,
     13,  6,  4,  9,  8, 15,  3,  0, 11,  1,  2, 12,  5, 10, 14,  7,
     1, 10, 13,  0,  6,  9,  8,  7,  4, 15, 14,  3, 11,  5,  2, 12 ],


[7, 13, 14,  3,  0,  6,  9, 10,  1,  2,  8,  5, 11,  12,  4, 15,
     13,  8, 11,  5,  6, 15,  0,  3,  4,  7,  2, 12,  1, 10, 14,9,
     10,  6,  9,  0, 12, 11,  7, 13, 15,  1,  3, 14,  5,  2,  8,  4,
     3, 15,  0,  6, 10,  1, 13,  8,  9,  4,  5, 11, 12,  7,  2, 14],


 [2, 12,  4,  1,  7, 10, 11,  6,  8,  5,  3, 15, 13,  0, 14,  9,
     14, 11,  2, 12,  4,  7, 13,  1,  5,  0, 15, 10,  3,  9,  8,  6,
     4,  2,  1, 11, 10, 13,  7,  8, 15,  9, 12,  5,  6,  3,  0, 14,
     11,  8, 12,  7,  1, 14,  2, 13,  6, 15,  0,  9, 10,  4,  5,  3],

[12,  1, 10, 15,  9,  2,  6,  8,  0, 13,  3,  4, 14,  7,  5, 11,
     10, 15,  4,  2,  7, 12,  9,  5,  6,  1, 13, 14,  0, 11,  3,  8,
     9, 14, 15,  5,  2,  8, 12,  3,  7,  0,  4, 10,  1, 13, 11,  6,
     4,  3,  2, 12,  9,  5, 15, 10, 11, 14,  1,  7,  6,  0,  8, 13],


[4, 11,  2, 14, 15,  0,  8, 13,  3, 12,  9,  7,  5, 10,  6,  1,
     13,  0, 11,  7,  4,  9,  1, 10, 14,  3,  5, 12,  2, 15,  8,  6,
     1,  4, 11, 13, 12,  3,  7, 14, 10, 15,  6,  8,  0,  5,  9,  2,
     6, 11, 13,  8,  1,  4, 10,  7,  9,  5,  0, 15, 14,  2,  3, 12],


[13,  2,  8,  4,  6, 15, 11,  1, 10,  9,  3, 14,  5,  0, 12,  7,
     1, 15, 13,  8, 10,  3,  7,  4, 12,  5,  6, 11,  0, 14,  9,  2,
     7, 11,  4,  1,  9, 12, 14,  2,  0,  6, 10, 13, 15,  3,  5,  8,
     2,  1, 14,  7,  4, 10,  8, 13, 15, 12,  9,  0,  3,  5,  6, 11],

]

#key

PC_1 = [57, 49, 41, 33, 25, 17,9,
       1, 58, 50, 42, 34, 26, 18,
      10,  2, 59, 51, 43, 35, 27,
      19, 11,  3, 60, 52, 44, 36,
      63, 55, 47, 39, 31, 23, 15,
       7, 62, 54, 46, 38, 30, 22,
      14,  6, 61, 53, 45, 37, 29,
      21, 13,  5, 28, 20, 12, 4]



PC_2 = [14, 17, 11, 24,  1,  5,  3, 28,
      15,  6, 21, 10, 23, 19, 12,  4,
      26,  8, 16,  7, 27, 20, 13,  2,
      41, 52, 31, 37, 47, 55, 30, 40,
      51, 45, 33, 48, 44, 49, 39, 56,
      34, 53, 46, 42, 50, 36, 29, 32]


#秘钥左移的位数
SHIFT = [1,1,2,2,2,2,2,2,1,2,2,2,2,2,2,1]


import re
mingwen=input("输入明文：")
key=input("输入秘钥：")

def delmess(s):
    res = ""
    for i in s:  #对每个字符转成二进制
        y=bin(int(i,16))
        tmp = bin(ord(i))  #字符转成asc码，再
        tmp = tmp[2:]  #去掉ob
        for j in range(0,8-len(tmp)):   #补齐8位
            tmp = '0'+ tmp   
        res += tmp
    ans = len(res)
    if ans % 64 != 0:
        for i in range( 64 - (ans%64)):           #不够64位补充0
            res += '0'
    return res

def get16key(key):  #得到16个48位秘钥
    res=""
    keylist=[]  #存储变换后的16个新密钥
    for i in PC_1:  #PC_1盒上的元素表示位置,循环56次
        res += key[i-1]    
    resl0=res[:28]
    resr0=res[28:]

    for i in SHIFT:   #shift左移位数
        resl0=resl0[i:]+resl0[:i]
        resr0=resr0[i:]+resr0[:i]
        resnew0=resl0+resr0  #变换前秘钥
        print(resnew0+',')
        resnew1=""        #变换后的新秘钥
        for j in PC_2:
            resnew1 += resnew0[j-1]
        keylist.append(resnew1)
    return keylist

def str_xor(my_str1,my_str2):  #str，key
    res = ""
    for i in range(0,len(my_str1)):
        xor_res = int(my_str1[i],10)^int(my_str2[i],10) #变成10进制是转化成字符串 2进制与10进制异或结果一样，都是1,0
        if xor_res == 1:
            res += '1'
        if xor_res == 0:
            res += '0'
    return res

def fun15(r0,key):
    res = ""  #E盒置换，扩展为48位
    for i in E:
        res += r0[i-1]

    res2=str_xor(res,key) #扩展后与秘钥异或

    res3 = "" #S盒操作
    c = 0
    for i in range(0,len(res2),6):#步长为6，6位一组
        now_str = res2[i:i+6]    #第i个分组
        row = int(now_str[0]+now_str[5],2)   #b1b6 =r   第r行
        col = int(now_str[1:5],2)   #第c列
        #第几个s盒的第row*16+col个位置的元素
        num = bin(S[c][row*16 + col])[2:]   #bin输出可能不是4位，加上字符0
        for j in range(0,4-len(num)):
            num = '0'+ num
        res3 += num
        c  += 1

    res4 = "" #p盒置换
    for i in  P:
        res4 += res3[i-1]
    return res4

mess=delmess(mingwen)
key=delmess(key)
keylist=get16key(key)
tmp = re.findall(r'.{64}',mess) 
miwen=""
for item in tmp:
    res=""
    for i in IP_table:
        res += item[i-1]    #ip置换
    l0=res[:32]
    r0=res[32:]
    for i in range(0,15):
        mes_tmp = r0  #暂存右边32位
        f_result = fun15(mes_tmp,keylist[i])   #右32位与k的f函数值
        res1 = str_xor(f_result,l0)
        r0 = res1  #f函数的结果与左边32位异或   作为下次右边32位
        l0 = mes_tmp   #上一次的右边直接放到左边
    f_result = fun15(r0,keylist[15])  #第16次不用换位，故不用暂存右边
    mes_fin_left = str_xor(r0,f_result)
    mes_fin_right = r0
    bin_str=mes_fin_left + mes_fin_right
    res2 = ""
    for i in IP_re_table:
        res2 += bin_str[i-1]
    miwen+=res2
print(miwen)
res3 = ""
tmp1 = re.findall(r'.{8}',miwen)  #每8位表示一个字符
for i in tmp1:
    res3 += chr(int(i,2))  #base参数的意思，将该字符串视作2进制转化为10进制
print(res3)
